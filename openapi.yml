openapi: 3.0.0
info:
  title: User Authentication and Posts API
  version: 1.0.0

paths:
  /register:
    post:
      summary: Регистрация нового пользователя
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректный запрос (например, логин или email уже зарегистрированы)

  /login:
    post:
      summary: Вход пользователя
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Не авторизован (неверный логин или пароль)

  /token:
    post:
      summary: Получение токена доступа
      operationId: getToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Токен успешно сгенерирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Не авторизован (неверный логин или пароль)

  /users/me:
    get:
      summary: Получение профиля текущего пользователя
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован

    put:
      summary: Обновление профиля текущего пользователя
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Профиль пользователя обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован

  /posts:
    post:
      summary: Создание нового поста
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Пост успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован

    get:
      summary: Получение списка постов пользователя
      operationId: listPosts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Количество постов на странице
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        '401':
          description: Не авторизован

  /posts/{post_id}:
    get:
      summary: Получение поста по ID
      operationId: getPost
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста
          schema:
            type: integer
      responses:
        '200':
          description: Данные поста
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован
        '403':
          description: Доступ запрещен
        '404':
          description: Пост не найден

    put:
      summary: Обновление поста
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Пост успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован
        '403':
          description: Доступ запрещен
        '404':
          description: Пост не найден

    delete:
      summary: Удаление поста
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста
          schema:
            type: integer
      responses:
        '204':
          description: Пост успешно удален
        '401':
          description: Не авторизован
        '403':
          description: Доступ запрещен
        '404':
          description: Пост не найден

components:
  schemas:
    UserCreate:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
        password:
          type: string
        email:
          type: string
          format: email

    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          type: string
          format: date
        email:
          type: string
          format: email
        phone_number:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        birth_date:
          type: string
          format: date
          nullable: true
        phone_number:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string

    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string

    PostCreate:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
        description:
          type: string
        is_private:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
          default: []

    PostUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        creator_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    PaginatedPosts:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        total:
          type: integer
        page:
          type: integer
        total_pages:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
